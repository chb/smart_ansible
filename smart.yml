---
# TODO: change /bin/sh from dash to bash
- name: check for prerequisites
  hosts: all
  vars_files:
    - vars.yml
  tasks:
    - name: fail if no hostname variable was specified
      action: fail
              msg="no hostname variable was specified"
      when: hostname is not defined
    - name: fail if we are not running on the correct linux distribution
      action: fail
              msg="this must be run on an $distro $distro_version system"
      only_if: "'$ansible_distribution' != '$distro' or '$ansible_distribution_version' != '$distro_version'"
    - name: check that passwordless sudo is enabled
      action: sudo_passwordless

- name: setup user/group and install required packages
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  tasks:
    - name: create group
      action: group name=$username
    - name: create user
      action: user
              name=$username password=$password
              group=$username groups=sudo
              shell=/bin/bash
    - name: install /etc/sudoers
      action: copy
              src=files/etc/sudoers
              dest=/etc/sudoers
              owner=root group=root mode=0440
    - name: install ~/.pgpass
      action: template
              src=templates/$userhome/.pgpass
              dest=$userhome/.pgpass
              owner=$username group=$username mode=0600
    - name: update apt cache and install package python-psycopg2
      action: apt pkg=python-psycopg2 update_cache=yes
    - name: install package python-m2crypto
      action: apt pkg=python-m2crypto
    - name: install package python-simplejson
      action: apt pkg=python-simplejson
    - name: install package python-setuptools
      action: apt pkg=python-setuptools
    - name: install package python-pyparsing
      action: apt pkg=python-pyparsing
    - name: install package python-django
      action: apt pkg=python-django
    - name: "install python packages via easy_install: rdflib, rdfextras, jsonschema, httplib2"
      action: command easy_install -U "rdflib==$rdflib_version" "rdfextras==$rdfextras_version" "jsonschema==$jsonschema_version" httplib2
    - name: install package postgresql
      action: apt pkg=postgresql
    - name: install package git
      action: apt pkg=git

- name: configure postgresql
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  tasks:
    - name: start postgresql service
      action: service name=postgresql state=started
    - name: drop postgresql cluster
      action: command pg_dropcluster --stop $postgresql_version main
      sudo_user: postgres
    - name: create postgresql cluster with utf-8 encoding
      action: command pg_createcluster --start -e UTF-8 $postgresql_version main
      sudo_user: postgres
    - name: create postgresql user
      action: postgresql_user user=$username password=$username role_attr_flags=SUPERUSER
      sudo_user: postgres
    - name: install main postgresql configuration file
      action: copy
              src=files/etc/postgresql/$postgresql_version/main/pg_hba.conf
              dest=/etc/postgresql/$postgresql_version/main/pg_hba.conf
              owner=postgres group=postgres mode=0640
      notify:
        - restart postgresql
  handlers:
    - name: restart postgresql
      action: service name=postgresql state=restarted

- name: install tomcat and sesame
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  tasks:
    - name: install package tomcat7
      action: apt pkg=tomcat7
    - name: stop tomcat service
      action: service name=tomcat7 state=stopped
    - name: download sesame
      action: get_url
              url=http://downloads.sourceforge.net/project/sesame/Sesame%202/$sesame_version/openrdf-sesame-${sesame_version}-sdk.tar.gz
              dest=$userhome/openrdf-sesame-${sesame_version}-sdk.tar.gz
              owner=$username group=$username mode=0640
      sudo_user: $username
    - name: explode sesame tarball
      action: command
              chdir=$userhome
              tar -xzvf openrdf-sesame-${sesame_version}-sdk.tar.gz
      sudo_user: $username
    - name: create sesame home directory
      action: file
              path=/usr/share/tomcat7/.aduna
              state=absent
    - name: set ownership/permissions on sesame home directory
      action: file
              path=/usr/share/tomcat7/.aduna
              owner=tomcat7 group=tomcat7 mode=0755 state=directory
    - name: deploy sesame webapps
      action: shell
              chdir=$userhome
              cp -f openrdf-sesame-$sesame_version/war/* /var/lib/tomcat7/webapps
    - name: start tomcat service
      action: service name=tomcat7 state=started

- name: setup smart servers
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  sudo_user: $username
  tasks:
    # setup smart_server
    - name: clone smart_server git repository
      action: command
              creates=$path_to_smart_server
              git clone --recursive $smart_server_repo_url $path_to_smart_server
    - name: install smart_server settings file
      action: template
              src=templates/$path_to_smart_server/settings.py
              dest=$path_to_smart_server/settings.py
              owner=$username group=$username mode=0644
    - name: install smart_server application list
      action: template
              src=templates/$path_to_smart_server/bootstrap_helpers/application_list.json
              dest=$path_to_smart_server/bootstrap_helpers/application_list.json
              owner=$username group=$username mode=0644
    - name: install smart_server bootstrap applications
      action: template
              src=templates/$path_to_smart_server/bootstrap_helpers/bootstrap_applications.py
              dest=$path_to_smart_server/bootstrap_helpers/bootstrap_applications.py
              owner=$username group=$username mode=0644
    # setup smart_ui_server
    - name: clone smart_ui_server git repository
      action: command
              creates=$path_to_smart_ui_server
              git clone --recursive $smart_ui_server_repo_url $path_to_smart_ui_server
    - name: install smart_ui_server settings file
      action: template
              src=templates/$path_to_smart_ui_server/settings.py
              dest=$path_to_smart_ui_server/settings.py
              owner=$username group=$username mode=0644
    # setup smart_sample_apps
    - name: clone smart_sample_apps git repository
      action: command
              creates=$path_to_smart_sample_apps
              git clone --recursive $smart_sample_apps_repo_url $path_to_smart_sample_apps
    - name: install smart_sample_apps settings file
      action: template
              src=templates/$path_to_smart_sample_apps/settings.py
              dest=$path_to_smart_sample_apps/settings.py
              owner=$username group=$username mode=0644

- name: install and configure apache httpd
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  tasks:
    - name: install package apache2
      action: apt pkg=apache2
    - name: install package libapache2-mod-python
      action: apt pkg=libapache2-mod-python
    - name: install package libapache2-mod-wsgi
      action: apt pkg=libapache2-mod-wsgi
    - name: stop apache service
      action: service name=apache2 state=stopped
    - name: install apache ports configuration file
      action: copy
              src=files/etc/apache2/ports.conf
              dest=/etc/apache2/ports.conf
              owner=root group=root mode=0644
    - name: install api-verify app virtual host configuration file
      action: template
              src=templates/etc/apache2/sites-available/api-verify
              dest=/etc/apache2/sites-available/api-verify
              owner=root group=root mode=0644
    - name: install mpr-monitor app virtual host configuration file
      action: template
              src=templates/etc/apache2/sites-available/mpr-monitor
              dest=/etc/apache2/sites-available/mpr-monitor
              owner=root group=root mode=0644
    - name: install rxreminder app virtual host configuration file
      action: template
              src=templates/etc/apache2/sites-available/rxreminder
              dest=/etc/apache2/sites-available/rxreminder
              owner=root group=root mode=0644
    - name: install smart-servers virtual host configuration file
      action: template
              src=templates/etc/apache2/sites-available/smart-servers
              dest=/etc/apache2/sites-available/smart-servers
              owner=root group=root mode=0644
    - name: enable rewrite module
      action: file
              src=/etc/apache2/mods-available/rewrite.load
              path=/etc/apache2/mods-enabled/rewrite.load
              owner=root group=root state=link
    - name: disable default virtual host
      action: file
              path=/etc/apache2/sites-enabled/000-default
              state=absent
    - name: enable smart-servers virtual host
      action: file
              src=/etc/apache2/sites-available/smart-servers
              path=/etc/apache2/sites-enabled/001-smart-servers
              owner=root group=root state=link
    - name: enable api-verify app virtual host
      action: file
              src=/etc/apache2/sites-available/api-verify
              path=/etc/apache2/sites-enabled/002-api-verify
              owner=root group=root state=link
    - name: enable mpr-monitor app virtual host
      action: file
              src=/etc/apache2/sites-available/mpr-monitor
              path=/etc/apache2/sites-enabled/003-mpr-monitor
              owner=root group=root state=link
    - name: enable rxreminder app virtual host
      action: file
              src=/etc/apache2/sites-available/rxreminder
              path=/etc/apache2/sites-enabled/004-rxreminder
              owner=root group=root state=link
    - name: start apache service
      action: service name=apache2 state=started

- name: reset smart_server and smart_ui_server
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  sudo_user: $username
  tasks:
    - name: run smart_server reset script
      action: command
              chdir=$path_to_smart_server
              $path_to_smart_server/reset.sh
    - name: run smart_ui_server reset script
      action: command
              chdir=$path_to_smart_ui_server
              $path_to_smart_ui_server/reset.sh

- name: generate and load smart sample patient data
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  sudo_user: $username
  tasks:
    # setup smart_sample_patients
    - name: clone smart_sample_patients git repository
      action: command
              creates=$path_to_smart_sample_patients
              git clone --recursive $smart_sample_patients_repo_url $path_to_smart_sample_patients
    - name: create sample patients target directory
      action: file
              path=$path_to_smart_sample_patients/generated-data
              owner=$username group=$username mode=0755 state=directory
    # TODO: obviously this shouldn't reference a specific patient file
    #       need a better mechanism for idempotency here
    - name: run sample patient data generation script
      action: command
              chdir=$path_to_smart_sample_patients/bin
              creates=$path_to_smart_sample_patients/generated-data/p1032702.xml
              python generate.py --write ../generated-data
    - name: run sample patient data load script
      action: shell
              chdir=$path_to_smart_server
              PYTHONPATH=.:.. DJANGO_SETTINGS_MODULE=settings
              python load_tools/load_one_patient.py
              $path_to_smart_sample_patients/generated-data/*
