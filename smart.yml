---
# TODO: change /bin/sh from dash to bash
- name: CHECK PREREQUISITES
  hosts: all
  vars_files:
    - vars.yml
  tasks:
    - name: Hostname Variable is Specified
      fail: msg="no hostname variable was specified"
      when: hostname is not defined
    - name: Check Linux Distribution
      fail: msg="this must be run on an {{distro}} {{distro_version}} system"
      when: "'{{ansible_distribution}}' != '{{distro}}' or '{{ansible_distribution_version}}' != '{{distro_version}}'"
    - name: Passwordless sudo is Enabled
      action: sudo_passwordless

- name: SETUP USER/GROUP
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  tasks:
    - name: Create Group
      group: name="{{username}}"
    - name: Create User
      user: name="{{username}}" password="{{password}}"
            group="{{username}}" groups=sudo
            shell=/bin/bash
    - name: Configure /etc/sudoers
      copy: src=files/etc/sudoers
            dest=/etc/sudoers
            owner=root group=root mode=0440
    - name: Configure PostgreSQL Account Access
      template: src=templates/"{{userhome}}"/.pgpass
                dest="{{userhome}}"/.pgpass
                owner="{{username}}" group="{{username}}" mode=0600
      
- name: INSTALL REQUIRED PACKAGES
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  tasks:
    - name: Update apt Cache 
      apt: update_cache=yes
    - name: Upgrade the Server
      apt: upgrade=full
    - name: Install GIT
      apt: pkg=git
    - name: Install Django
      apt: pkg=python-django
    - name: Install Package python-psycopg2
      apt: pkg=python-psycopg2
    - name: Install Package python-m2crypto
      apt: pkg=python-m2crypto
    - name: Install Package python-simplejson
      apt: pkg=python-simplejson
    - name: Install Package python-setuptools
      apt: pkg=python-setuptools
    - name: Install Package python-pyparsing
      apt: pkg=python-pyparsing
    - name: "Install Python Packages: rdflib, rdfextras, jsonschema, httplib2"
      command: easy_install -U "rdflib=={{rdflib_version}}" "rdfextras=={{rdfextras_version}}" "jsonschema=={{jsonschema_version}}" "httplib2=={{httplib2_version}}"

- name: SETUP POSTGRESQL
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  tasks:
    - name: Install PostgreSQL
      apt: pkg=postgresql
    - name: Drop Exisiting PostgreSQL Cluster
      command: pg_dropcluster --stop {{postgresql_version}} main
      sudo_user: postgres
    - name: Create PostgreSQL Cluster with UTF-8 Encoding
      command: pg_createcluster --start -e UTF-8 {{postgresql_version}} main
      sudo_user: postgres
    - name: Create PostgreSQL User
      postgresql_user: user="{{username}}" password="{{username}}" role_attr_flags=SUPERUSER
      sudo_user: postgres
    - name: Configure PostgreSQL
      copy: src="files/etc/postgresql/{{postgresql_version}}/main/pg_hba.conf"
            dest="/etc/postgresql/{{postgresql_version}}/main/pg_hba.conf"
            owner=postgres group=postgres mode=0640
      notify:
        - Restart PostgreSQL
  handlers:
    - name: Restart PostgreSQL
      service: name=postgresql state=restarted

- name: INSTALL OPENRDF SESAME AND TOMCAT
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  tasks:
    - name: Install Tomcat
      apt: pkg=tomcat7
    - name: Download OpenRDF Sesame
      get_url: url="http://downloads.sourceforge.net/project/sesame/Sesame%202/{{sesame_version}}/openrdf-sesame-{{sesame_version}}-sdk.tar.gz"
               dest="{{userhome}}/openrdf-sesame-{{sesame_version}}-sdk.tar.gz"
               owner="{{username}}" group="{{username}}" mode=0640
      sudo_user: "{{username}}"
    - name: Unpack OpenRDF Sesame
      command: chdir="{{userhome}}"
               tar -xzvf openrdf-sesame-{{sesame_version}}-sdk.tar.gz
      sudo_user: "{{username}}"
    - name: Create Sesame Data Directory
      file: path=/usr/share/tomcat7/.aduna
            state=absent
    - name: Set Ownership/Permissions on Sesame Data Directory
      file: path=/usr/share/tomcat7/.aduna
            owner=tomcat7 group=tomcat7 mode=0755 state=directory
    - name: Deploy OpenRDF Sesame on Tomcat
      shell: chdir="{{userhome}}"
             cp -f openrdf-sesame-{{sesame_version}}/war/* /var/lib/tomcat7/webapps
      notify:
        - Restart Tomcat
  handlers:
    - name: Restart Tomcat
      service: name=tomcat7 state=restarted

- name: SETUP SMART SERVERS
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  sudo_user: "{{username}}"
  tasks:
    # setup smart_server
    - name: Download SMART API Server
      command: creates="{{path_to_smart_server}}"
               git clone --recursive {{smart_server_repo_url}} {{path_to_smart_server}}
    - name: Checkout SMART API Server Version {{smart_version}}
      command: chdir="{{path_to_smart_server}}"
               git checkout {{git_branch}}
    - name: Configure SMART API Server
      template: src="templates/config/api_settings.py"
                dest="{{path_to_smart_server}}/settings.py"
                owner="{{username}}" group="{{username}}" mode=0644
    - name: Configure Application List
      template: src="templates/config/application_list.json"
                dest="{{path_to_smart_server}}/bootstrap_helpers/application_list.json"
                owner="{{username}}" group="{{username}}" mode=0644
    - name: Configure Bootstrap Applications
      template: src="templates/config/bootstrap_applications.py"
                dest="{{path_to_smart_server}}/bootstrap_helpers/bootstrap_applications.py"
                owner="{{username}}" group="{{username}}" mode=0644
    - name: Setup Link to SMART Manager
      command: creates="{{userhome}}/smart_manager.py"
               ln -s {{path_to_smart_server}}/load_tools/smart_manager.py {{userhome}}/smart_manager.py
    # setup smart_ui_server
    - name: Download SMART UI Server
      command: creates="{{path_to_smart_ui_server}}"
               git clone --recursive {{smart_ui_server_repo_url}} {{path_to_smart_ui_server}}
    - name: Checkout SMART UI Server Version {{smart_version}}
      command: chdir="{{path_to_smart_ui_server}}"
               git checkout {{git_branch}}
    - name: Configure SMART UI Server
      template: src="templates/config/ui_settings.py"
                dest="{{path_to_smart_ui_server}}/settings.py"
                owner="{{username}}" group="{{username}}" mode=0644
    # setup smart_sample_apps
    - name: Download SMART Sample Apps
      command: creates="{{path_to_smart_sample_apps}}"
               git clone --recursive {{smart_sample_apps_repo_url}} {{path_to_smart_sample_apps}}
    - name: Checkout SMART Sample Apps Version {{smart_version}}
      command: chdir="{{path_to_smart_sample_apps}}"
               git checkout {{git_branch}}
    - name: Configure SMART Sample Apps Server
      template: src="templates/config/apps_settings.py"
                dest="{{path_to_smart_sample_apps}}/settings.py"
                owner="{{username}}" group="{{username}}" mode=0644

- name: SETUP APACHE
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  tasks:
    - name: Install Apache
      apt: pkg=apache2
    - name: Install Package libapache2-mod-python
      apt: pkg=libapache2-mod-python
    - name: Install Package libapache2-mod-wsgi
      apt: pkg=libapache2-mod-wsgi
    - name: Configure Apache Ports
      copy: src=files/etc/apache2/ports.conf
            dest=/etc/apache2/ports.conf
            owner=root group=root mode=0644
    - name: Setup Virtual Host for API Verifier App
      template: src=templates/etc/apache2/sites-available/api-verify
                dest=/etc/apache2/sites-available/api-verify
                owner=root group=root mode=0644
    - name: Setup Virtual Host for MPR Monitor App
      template: src=templates/etc/apache2/sites-available/mpr-monitor
                dest=/etc/apache2/sites-available/mpr-monitor
                owner=root group=root mode=0644
#    - name: install rxreminder app virtual host configuration file
#      template: src=templates/etc/apache2/sites-available/rxreminder
#                dest=/etc/apache2/sites-available/rxreminder
#                owner=root group=root mode=0644
    - name: Setup Virtual Host for SMART Servers
      template: src=templates/etc/apache2/sites-available/smart-servers
                dest=/etc/apache2/sites-available/smart-servers
                owner=root group=root mode=0644
    - name: Enable mod_rewrite
      file: src=/etc/apache2/mods-available/rewrite.load
            path=/etc/apache2/mods-enabled/rewrite.load
            owner=root group=root state=link
    - name: Disable Default Virtual Host
      file: path=/etc/apache2/sites-enabled/000-default
            state=absent
    - name: Enable Virtual Host for SMART Servers
      file: src=/etc/apache2/sites-available/smart-servers
            path=/etc/apache2/sites-enabled/001-smart-servers
            owner=root group=root state=link
    - name: Enable Virtual Host for API Verifier
      file: src=/etc/apache2/sites-available/api-verify
            path=/etc/apache2/sites-enabled/002-api-verify
            owner=root group=root state=link
    - name: Enable Virtual Host for MPR Monitor
      file: src=/etc/apache2/sites-available/mpr-monitor
            path=/etc/apache2/sites-enabled/003-mpr-monitor
            owner=root group=root state=link
#    - name: Enable Virtual Host for RX Reminder
#      file: src=/etc/apache2/sites-available/rxreminder
#            path=/etc/apache2/sites-enabled/004-rxreminder
#            owner=root group=root state=link
      notify:
        - Restart Apache
  handlers:
    - name: Restart Apache
      service: name=apache2 state=restarted

- name: RESET SMART SERVERS
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  sudo_user: "{{username}}"
  tasks:
    - name: Reset SMART API Server
      command: chdir="{{path_to_smart_server}}"
               {{path_to_smart_server}}/reset.sh
    - name: Reset SMART UI Server
      command: chdir="{{path_to_smart_ui_server}}"
               {{path_to_smart_ui_server}}/reset.sh

- name: LOAD SAMPLE PATIENTS
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  sudo_user: "{{username}}"
  tasks:
    # setup smart_sample_patients
    - name: Download Sample Patients
      command: creates="{{path_to_smart_sample_patients}}"
               git clone --recursive {{smart_sample_patients_repo_url}} {{path_to_smart_sample_patients}}
    - name: Checkout Sample Patients Version {{smart_version}}
      command: chdir="{{path_to_smart_sample_patients}}"
               git checkout {{git_branch}}
    - name: Create Sample Patients Build Directory
      file: path="{{path_to_smart_sample_patients}}/generated-data"
            owner="{{username}}" group="{{username}}" mode=0755 state=directory
    # TODO: obviously this shouldn't reference a specific patient file
    #       need a better mechanism for idempotency here
    - name: Build Sample Patients
      command: chdir="{{path_to_smart_sample_patients}}/bin"
               creates="{{path_to_smart_sample_patients}}/generated-data/p1032702.xml"
               python generate.py --write ../generated-data
    - name: Generate Vitals Patient
      command: chdir="{{path_to_smart_sample_patients}}/bin"
               creates="{{path_to_smart_sample_patients}}/generated-data/99912345.xml"
               python generate-vitals-patient.py ../generated-data/99912345.xml
    - name: Load Sample Patients in SMART Server
      shell: chdir="{{path_to_smart_server}}"
             PYTHONPATH=.:.. DJANGO_SETTINGS_MODULE=settings
             python load_tools/load_one_patient.py {{path_to_smart_sample_patients}}/generated-data/* {{path_to_smart_sample_patients}}/deidentified-patients/*