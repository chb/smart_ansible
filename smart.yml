---
# TODO: change /bin/sh from dash to bash
- name: Check Prerequisites
  hosts: all
  vars_files:
    - vars.yml
  tasks:
    - name: Hostname Variable is Specified
      fail: msg="no hostname variable was specified"
      when: hostname is not defined
    - name: Check Linux Distribution
      fail: msg="this must be run on an $distro $distro_version system"
      when: "'$ansible_distribution' != '$distro' or '$ansible_distribution_version' != '$distro_version'"
    - name: Passwordless sudo is Enabled
      action: sudo_passwordless

- name: Setup user/group
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  tasks:
    - name: Create Group
      group: name=$username
    - name: Create User
      user: name=$username password=$password
            group=$username groups=sudo
            shell=/bin/bash
    - name: Configure /etc/sudoers
      copy: src=files/etc/sudoers
            dest=/etc/sudoers
            owner=root group=root mode=0440
    - name: Configure PostgreSQL Account Access
      template: src=templates/$userhome/.pgpass
                dest=$userhome/.pgpass
                owner=$username group=$username mode=0600
      
- name: Install Required Packages
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  tasks:
    - name: Update apt Cache 
      apt: update_cache=yes
    - name: Upgrade the Server
      apt: upgrade=full
    - name: Install GIT
      apt: pkg=git
    - name: Install Django
      apt: pkg=python-django
    - name: Install Package python-psycopg2
      apt: pkg=python-psycopg2
    - name: Install Package python-m2crypto
      apt: pkg=python-m2crypto
    - name: Install Package python-simplejson
      apt: pkg=python-simplejson
    - name: Install Package python-setuptools
      apt: pkg=python-setuptools
    - name: Install Package python-pyparsing
      apt: pkg=python-pyparsing
    - name: "Install Python Packages: rdflib, rdfextras, jsonschema, httplib2"
      command: easy_install -U "rdflib==$rdflib_version" "rdfextras==$rdfextras_version" "jsonschema==$jsonschema_version" "httplib2==$httplib2_version"

- name: Setup and Configure PostgreSQL
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  tasks:
    - name: Install PostgreSQL
      apt: pkg=postgresql
    - name: Drop Exisiting PostgreSQL Cluster
      command: pg_dropcluster --stop $postgresql_version main
      sudo_user: postgres
    - name: Create PostgreSQL Cluster with UTF-8 Encoding
      command: pg_createcluster --start -e UTF-8 $postgresql_version main
      sudo_user: postgres
    - name: Create PostgreSQL User
      postgresql_user: user=$username password=$username role_attr_flags=SUPERUSER
      sudo_user: postgres
    - name: Configure PostgreSQL
      copy: src=files/etc/postgresql/$postgresql_version/main/pg_hba.conf
            dest=/etc/postgresql/$postgresql_version/main/pg_hba.conf
            owner=postgres group=postgres mode=0640
      notify:
        - Restart PostgreSQL
  handlers:
    - name: Restart PostgreSQL
      service: name=postgresql state=restarted

- name: Setup OpenRDF Sesame on Tomcat
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  tasks:
    - name: Install Tomcat
      apt: pkg=tomcat7
    - name: Download OpenRDF Sesame
      get_url: url=http://downloads.sourceforge.net/project/sesame/Sesame%202/$sesame_version/openrdf-sesame-${sesame_version}-sdk.tar.gz
               dest=$userhome/openrdf-sesame-${sesame_version}-sdk.tar.gz
               owner=$username group=$username mode=0640
      sudo_user: $username
    - name: Unpack OpenRDF Sesame
      command: chdir=$userhome
               tar -xzvf openrdf-sesame-${sesame_version}-sdk.tar.gz
      sudo_user: $username
    - name: Create Sesame Data Directory
      file: path=/usr/share/tomcat7/.aduna
            state=absent
    - name: Set Ownership/Permissions on Sesame Data Directory
      file: path=/usr/share/tomcat7/.aduna
            owner=tomcat7 group=tomcat7 mode=0755 state=directory
    - name: Deploy OpenRDF Sesame on Tomcat
      shell: chdir=$userhome
             cp -f openrdf-sesame-$sesame_version/war/* /var/lib/tomcat7/webapps
      notify:
        - Restart Tomcat
  handlers:
    - name: Restart Tomcat
      service: name=tomcat7 state=restarted

- name: setup smart servers
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  sudo_user: $username
  tasks:
    # setup smart_server
    - name: clone smart_server git repository
      action: command
              creates=$path_to_smart_server
              git clone --recursive $smart_server_repo_url $path_to_smart_server
    - name: install smart_server settings file
      action: template
              src=templates/$path_to_smart_server/settings.py
              dest=$path_to_smart_server/settings.py
              owner=$username group=$username mode=0644
    - name: install smart_server application list
      action: template
              src=templates/$path_to_smart_server/bootstrap_helpers/application_list.json
              dest=$path_to_smart_server/bootstrap_helpers/application_list.json
              owner=$username group=$username mode=0644
    - name: install smart_server bootstrap applications
      action: template
              src=templates/$path_to_smart_server/bootstrap_helpers/bootstrap_applications.py
              dest=$path_to_smart_server/bootstrap_helpers/bootstrap_applications.py
              owner=$username group=$username mode=0644
    # setup smart_ui_server
    - name: clone smart_ui_server git repository
      action: command
              creates=$path_to_smart_ui_server
              git clone --recursive $smart_ui_server_repo_url $path_to_smart_ui_server
    - name: install smart_ui_server settings file
      action: template
              src=templates/$path_to_smart_ui_server/settings.py
              dest=$path_to_smart_ui_server/settings.py
              owner=$username group=$username mode=0644
    # setup smart_sample_apps
    - name: clone smart_sample_apps git repository
      action: command
              creates=$path_to_smart_sample_apps
              git clone --recursive $smart_sample_apps_repo_url $path_to_smart_sample_apps
    - name: install smart_sample_apps settings file
      action: template
              src=templates/$path_to_smart_sample_apps/settings.py
              dest=$path_to_smart_sample_apps/settings.py
              owner=$username group=$username mode=0644

- name: install and configure apache httpd
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  tasks:
    - name: install package apache2
      action: apt pkg=apache2
    - name: install package libapache2-mod-python
      action: apt pkg=libapache2-mod-python
    - name: install package libapache2-mod-wsgi
      action: apt pkg=libapache2-mod-wsgi
    - name: stop apache service
      action: service name=apache2 state=stopped
    - name: install apache ports configuration file
      action: copy
              src=files/etc/apache2/ports.conf
              dest=/etc/apache2/ports.conf
              owner=root group=root mode=0644
    - name: install api-verify app virtual host configuration file
      action: template
              src=templates/etc/apache2/sites-available/api-verify
              dest=/etc/apache2/sites-available/api-verify
              owner=root group=root mode=0644
    - name: install mpr-monitor app virtual host configuration file
      action: template
              src=templates/etc/apache2/sites-available/mpr-monitor
              dest=/etc/apache2/sites-available/mpr-monitor
              owner=root group=root mode=0644
    - name: install rxreminder app virtual host configuration file
      action: template
              src=templates/etc/apache2/sites-available/rxreminder
              dest=/etc/apache2/sites-available/rxreminder
              owner=root group=root mode=0644
    - name: install smart-servers virtual host configuration file
      action: template
              src=templates/etc/apache2/sites-available/smart-servers
              dest=/etc/apache2/sites-available/smart-servers
              owner=root group=root mode=0644
    - name: enable rewrite module
      action: file
              src=/etc/apache2/mods-available/rewrite.load
              path=/etc/apache2/mods-enabled/rewrite.load
              owner=root group=root state=link
    - name: disable default virtual host
      action: file
              path=/etc/apache2/sites-enabled/000-default
              state=absent
    - name: enable smart-servers virtual host
      action: file
              src=/etc/apache2/sites-available/smart-servers
              path=/etc/apache2/sites-enabled/001-smart-servers
              owner=root group=root state=link
    - name: enable api-verify app virtual host
      action: file
              src=/etc/apache2/sites-available/api-verify
              path=/etc/apache2/sites-enabled/002-api-verify
              owner=root group=root state=link
    - name: enable mpr-monitor app virtual host
      action: file
              src=/etc/apache2/sites-available/mpr-monitor
              path=/etc/apache2/sites-enabled/003-mpr-monitor
              owner=root group=root state=link
    - name: enable rxreminder app virtual host
      action: file
              src=/etc/apache2/sites-available/rxreminder
              path=/etc/apache2/sites-enabled/004-rxreminder
              owner=root group=root state=link
    - name: start apache service
      action: service name=apache2 state=started

- name: reset smart_server and smart_ui_server
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  sudo_user: $username
  tasks:
    - name: run smart_server reset script
      action: command
              chdir=$path_to_smart_server
              $path_to_smart_server/reset.sh
    - name: run smart_ui_server reset script
      action: command
              chdir=$path_to_smart_ui_server
              $path_to_smart_ui_server/reset.sh

- name: generate and load smart sample patient data
  hosts: all
  vars_files:
    - vars.yml
  sudo: yes
  sudo_user: $username
  tasks:
    # setup smart_sample_patients
    - name: clone smart_sample_patients git repository
      action: command
              creates=$path_to_smart_sample_patients
              git clone --recursive $smart_sample_patients_repo_url $path_to_smart_sample_patients
    - name: create sample patients target directory
      action: file
              path=$path_to_smart_sample_patients/generated-data
              owner=$username group=$username mode=0755 state=directory
    # TODO: obviously this shouldn't reference a specific patient file
    #       need a better mechanism for idempotency here
    - name: run sample patient data generation script
      action: command
              chdir=$path_to_smart_sample_patients/bin
              creates=$path_to_smart_sample_patients/generated-data/p1032702.xml
              python generate.py --write ../generated-data
    - name: run sample patient data load script
      action: shell
              chdir=$path_to_smart_server
              PYTHONPATH=.:.. DJANGO_SETTINGS_MODULE=settings
              python load_tools/load_one_patient.py
              $path_to_smart_sample_patients/generated-data/*
